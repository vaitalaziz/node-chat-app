const path = require('path');
const express = require('express');
const http = require('http');
const socketIO = require('socket.io');

const {generateMessage, generateLocationMessage} = require('./utils/message');
const publicPath = path.join(__dirname, '../public');
//console.log(publicPath);

const port = process.env.PORT || 2000;
var app = express();
var server = http.createServer(app);
var io = socketIO(server);

app.use(express.static(publicPath));

//register an event e.g: connection
io.on('connection', (socket) => {
  console.log('Server saying: New user connected now');

  //*** socket.emit connect to single connection ***
  //socket.emit from Admin text Welcome to the chat app
    // socket.emit('createMessage_server', {
    //   from: 'Admin',
    //   text: 'Welcome to our Chat!'
    // });
    socket.emit('createMessage_server', generateMessage('Admin', 'Welcome to our Chat App!'));

  // socket.broadcast.emit Admin text new user Joined
    //  socket.broadcast.emit('createMessage_server', {
    //    from: 'Admin',
    //    text: 'New User Join'
    //  });
    socket.broadcast.emit('createMessage_server', generateMessage('Admin','New User Join'));


  //*** socket.emit connect to single connection ***
  // sending email server to client, emit need to be under io.on
  // emit similar to listen. creating an object because allow to send many things as wish
        // socket.emit('createMessage_server', {
        //   from: 'mike@example.com',
        //   text: 'From server to Hallo Aziz....',
        //   createAt: 123
        // });


  //*** io.emit -> emits to every single connection ***
  // server receving email from client
  socket.on('createMessage_client', (msgRecvServer, callback) =>{
    console.log('Msg Recv Server:', msgRecvServer);
    //io.emit-> server forwarding the receving msg to all clients/connection
        // io.emit('createMessage_server', {
        //   from: msgRecvServer.from,
        //   text: msgRecvServer.text,
        //   //generated by server to prevent a specific client from spoofy when a msg was created
        //   createAt: new Date().getTime()
        // });
        io.emit('createMessage_server', generateMessage(msgRecvServer.from, msgRecvServer.text));
        callback("Server said done!"); // trigered callback to client with given some date
      //  callback("");

    // broadcast allows to send msg to all except the msg sender
      // socket.broadcast.emit('createMessage_server', {
      //   from: msgRecvServer.from,
      //   text: msgRecvServer.text,
      //   createAt: new Date().getTime()
      // });
});
      socket.on('creategeoLocationClient', (coords) => {
        // io.emit('createMessage_server', generateMessage('Admin',
        //             `${coords.latitude}, ${coords.longitude}`) );
        io.emit('newLocation_server', generateLocationMessage('Admin', coords.latitude, coords.longitude));
      });



  // if user disconnect then server respond here
  socket.on('disconnect', () => {
    console.log('Server saying: user disconnected now');
  });

});

//app.listen(port, function(){
server.listen(port, function(){
  console.log(`Server listening on port ${port}`);
});
